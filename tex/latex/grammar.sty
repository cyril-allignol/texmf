\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{grammar}[2019/03/11 0.2 Typesetting BNF grammars]

\RequirePackage{expl3, xparse, xifthen, l3regex}
\RequirePackage{synttree}
\RequirePackage{maths}
\RequirePackage{relsize}
\RequirePackage{environ}
\RequirePackage{catchfile}

% \newif\if@classic
% \@classicfalse
% \DeclareOption{classic}{\@classictrue}
% \ProcessOptions

%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Custom grammar commands

\DeclarePairedDelimiter{\token}{\langle}{\rangle}
\NewDocumentCommand{\pointer}{m}{\stackrel{\text{\tiny #1}}{\longrightarrow}}
\NewDocumentCommand{\derivesymbol}{}{\Rightarrow}
\NewDocumentCommand{\derive}{so}{%
  \mathrel{%
    \IfBooleanTF{#1}{\stackrel{*}{\derivesymbol}}%
    {\IfValueTF{#2}{\stackrel{\mathsmaller #2}{\derivesymbol}}%
      {\derivesymbol}}%
  }
}
\NewDocumentCommand{\lritemposition}{}{\mathbin{\bullet}}

%%%%%%%%%%%%%%%%%%%%%%%%%%%
\NewDocumentCommand{\bnfntfont}{}{\itshape}
\NewDocumentCommand{\bnftsfont}{}{\bfseries\ttfamily}
\NewDocumentCommand{\altop}{}{\mathrel{|}}
\NewDocumentCommand{\bnfntleft}{}{}
\NewDocumentCommand{\bnfntright}{}{\/}
\NewDocumentCommand{\bnftsleft}{}{}
\NewDocumentCommand{\bnftsright}{}{}
\NewDocumentCommand{\productionop}{}{\mathrel{\rightarrow}}
% \if@classic
%   \RenewDocumentCommand{\bnfntleft}{}{$\langle$}
%   \RenewDocumentCommand{\bnfntright}{}{$\rangle$}
%   \RenewDocumentCommand{\bnftsleft}{}{`}
%   \RenewDocumentCommand{\bnftsright}{}{'}
%   \RenewDocumentCommand{\productionop}{}{\mathrel{\Coloneqq}}
% \fi

\NewDocumentCommand{\bnfnt}{m}{\text{\bnfntleft{\bnfntfont#1}\bnfntright}}
\NewDocumentCommand{\bnfts}{m}{\text{\bnftsleft{\bnftsfont#1}\bnftsright}}

\ExplSyntaxOn

\keys_define:nn {grammar_keys} {%
  expand .bool_set_inverse:N = \l__grammar_inlinerules,
  expand .initial:n = false,
  numbering .bool_set:N = \l__grammar_numrules,
  numbering .initial:n = false,
  numbers .meta:n = {expand, numbering},
  inline .bool_set:N = \l__grammar_inline,
  inline .initial:n = false,
  repeatlhs .bool_set:N = \l__grammar_repeatlhs,
  repeatlhs .initial:n = true,
}

\newcounter{ruleno}
\cs_new:Nn \__grammar_newrule: {%
  \stepcounter{ruleno}
\item[\bool_if:NTF \l__grammar_numrules {\color{gray}\arabic{ruleno}.} {}]
}

\newsavebox{\rulelabel}

\cs_new:Nn \__grammar_production:n {%
  \savebox{\rulelabel}{$#1 \productionop$}%
  \bool_if:NTF {\l__grammar_inline}%
  {\usebox{\rulelabel}}%
  {\__grammar_newrule:\usebox{\rulelabel}}}%

\cs_new:Nn \__grammar_altprod: {%
  \bool_if:NTF {\l__grammar_inlinerules}%
  {$\altop$}%
  {\bool_if:NTF {\l__grammar_repeatlhs}%
    {\__grammar_newrule:\usebox{\rulelabel}}%
    {\__grammar_newrule:\makebox[\wd\rulelabel][r]{$\altop$}}}}%

\cs_new:Nn \__grammarparse:n {%
  \regex_replace_all:nnN { \| } { \c{__grammar_altprod:} } #1
  \regex_replace_all:nnN { \Â· } { \cM$\c{lritemposition}\cM$ } #1
  \regex_replace_all:nnN { <([^<]+)>\s*::= }
  { \c{__grammar_production:n}\cB\{\1\cE\} } #1
  \regex_replace_all:nnN { <([^<]+)> } { \c{bnfnt}\cB\{\1\cE\} } #1
  \regex_replace_all:nnN { \"([^\"]+)\" } { \c{bnfts}\cB\{\1\cE\} } #1
  #1
}

\NewEnviron{parsegrammar}{\__grammarparse:n \BODY}

\cs_new:Nn \__grammar_typeset: {%
  \group_begin:
  \setcounter{ruleno}{0}%
  \par%
  \list{}{%
    \setlength{\labelwidth}{\bool_if:NTF \l__grammar_numrules {1em} {\z@}}
    \setlength{\labelsep}{\bool_if:NTF \l__grammar_numrules {0.4em} {\z@}}
    \setlength{\leftmargin}{\dimexpr \labelwidth + \labelsep}
    \setlength{\itemindent}{\z@}
    \setlength{\listparindent}{\z@}
    \setlength{\parsep}{\z@}
    \setlength{\itemsep}{\z@}
  }
}
\cs_new:Nn \__grammar_endtypeset: {\endlist\par\relax\group_end:}

\cs_new:Nn \__grammartypeset:n {\__grammar_typeset: #1\__grammar_endtypeset:}

\tl_new:N \l__rules
\tl_new:N \l__previ
\NewDocumentCommand{\inlinegrammar}{m}
{ \group_begin:
  \keys_set:nn {grammar_keys} {expand = false, numbering = false, inline = true }
  \tl_set:Nn \l__rules {#1}
  \__grammarparse:n \l__rules
  \group_end:
}

\NewDocumentCommand{\lritem}{smo}
{ \group_begin:
  \keys_set:nn {grammar_keys} {expand = false, numbering = false, inline = true }
  \tl_set:Nn \l__rules {#2}
  \tl_set:Nn \l__previ {#3}
  \IfBooleanF{#1}{[}
  \__grammarparse:n \l__rules \IfValueT{#3}{,\,\__grammarparse:n \l__previ}
  \IfBooleanF{#1}{]}
  \group_end:
}

\makeatletter
\NewDocumentEnvironment{grammar}{o}{%
  \group_begin:
  \IfValueT{#1}{\keys_set:nn {grammar_keys} {#1}}
  \bool_set_false:N \l__grammar_inline%
  \__grammar_typeset:
  \parsegrammar
}{\endparsegrammar\__grammar_endtypeset:\group_end:}
\makeatother

\NewDocumentCommand{\inputgrammar}{om}{%
  \CatchFileDef{\grammarfilecontents}{#2}{}
  \group_begin:
  \IfValueT{#1}{\keys_set:nn {grammar_keys} {#1}}
  \bool_set_false:N \l__grammar_inline%
  \__grammartypeset:n {\expandafter\__grammarparse:n {\grammarfilecontents}}%
  \group_end:
}

\ExplSyntaxOff

\endinput
